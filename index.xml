<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My New Hugo Site</title><link>http://lukhen.com/</link><description>Recent content on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://lukhen.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency injection with reader monad.</title><link>http://lukhen.com/posts/20220504065732-dependency_injection_with_reader_monad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://lukhen.com/posts/20220504065732-dependency_injection_with_reader_monad/</guid><description>Change the signature of a function f: a-&amp;gt;b to f: a-&amp;gt;Reader&amp;lt;x, b&amp;gt; Change the signatures of all functions that call f (g: c -&amp;gt; d) to c -&amp;gt; Reader&amp;lt;x, d&amp;gt; Change all failing tests by introducing some fake x. Example
We have a type:
interface Book { title: string author: string } a database:
const books: Book[] = [ { title: &amp;#34;Iliad&amp;#34;, author: &amp;#34;Homer&amp;#34; }, { title: &amp;#34;For whom the bell tolls&amp;#34;, author: &amp;#34;Ernest Hemingway&amp;#34; }, { title: &amp;#34;Treasure Island&amp;#34;, author: &amp;#34;Robert Louis Stevenson&amp;#34; } ] 2 functions, where one is a dependency of the other:</description></item><item><title>Simple lens and traversal (optics in typescript with fp-ts)</title><link>http://lukhen.com/posts/20220417135003-simple_lense_and_traversal_optics_in_typescript_with_fp_ts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://lukhen.com/posts/20220417135003-simple_lense_and_traversal_optics_in_typescript_with_fp_ts/</guid><description>We have 3 simple types:
interface guest { name: string email: string } interface room { name: string } interface reservation { dateFrom: Date dateTo: Date guest: guest room: room } Let&amp;rsquo;s create one instance of reservation:
const res: reservation = { dateFrom: new Date(), dateTo: new Date(), guest: { name: &amp;#34;guest name&amp;#34;, email: &amp;#34;guest@email.com&amp;#34; }, room: { name: &amp;#34;001&amp;#34; } } In fp data is immutable, so changing a nested field would end up with creating new instance like this::</description></item></channel></rss>